[func assert [c message] [if c 0 [abort message]]]

[func not [x] [eq x 0]]

[func inc [x] [add x 1]]

[func dec [x] [sub x 1]]

[func is-negative [x] [lt x 0]]

[func is-whitespace [c]
  [bit-or [eq c 0x20] [eq c 0x0a]]]

[func is-between [lower c upper]
  [bit-and [le lower c] [le c upper]]]

[func is-digit [c] [is-between 0x30 c 0x39]]

[func is-align4 [x] [eq [bit-and x 3] 0]]

[func is-ident-char [c]
  [bit-or
    [is-between 0x61 c 0x7a] ; a-z
    [bit-or
      [is-between 0x2d c 0x2e] ; -.
      [is-digit c]]]]

[func get-token [start end]
  [assert [lt start end] 'empty token']
  [let [c [load8u start]]
    [if [is-whitespace c]
      [loop [j [inc start]]
        [if [if [lt j end] [is-whitespace [load8u j]] 0]
          [cont [inc j]]
          [list 1 start j j]]]
      [if [eq c 0x27] ; '\''
        [loop [j [inc start]]
          [if [if [lt j end] [neq [load8u j] 0x27] 0]
            [cont [inc j]]
            [list 2 [inc start] [dec j] [inc j]]]]
        [if [eq c 0x3b] ; ';'
          [loop [j [inc start]]
            [if [if [lt j end] [neq [load8u j] 0x0a] 0]
              [cont [inc j]]
              [list 4 start j j]]]
          [if [bit-or [eq c 0x5b] [eq c 0x5d]] ; '[' ']'
            [list 5 start [inc start] [inc start]]

            [if [is-ident-char c]
              [loop [j [inc start]]
                [if [if [lt j end] [is-ident-char [load8u j]] 0]
                  [cont [inc j]]
                  [list 6 start j j]]]

              [abort 'unexpected character']]]]]]]]

;; init memory top
[store32 0 4]

[func alloc [size]
  [assert [ge size 0] 'alloc negative size']
  [assert [le size 65536] 'alloc too large, more than 64k']
  [assert [is-align4 size] 'alloc not aligned']
  [let
    [current-top [load32 0]
     - [assert current-top 'memory not initialized - no top']
     - [assert [is-align4 current-top] 'current top not aligned']
     mem-bytes [mul 65536 [memory-pages]]
     - [assert [le current-top mem-bytes] 'out of memory - top outside memory before alloc']
     new-top [add current-top size]]
    [assert [le new-top mem-bytes] 'out of memory - top outside memory after alloc']
    [store32 0 new-top]
    current-top]]

; dynamic object system
; an object has a tag and a payload (size depends on tag)
; tags
; maybe make them odd so a tag can also be a pointer
; 1 - i32
; 15 - character
; 17 - string i32 length + utf8 bytes (u8)
; 19 - array i32 length + i32 elements
; custom tags are pointers to descriptors

[func alloc-i32 [value]
  [let [p [alloc 8]]
    [store32 p 1]
    [store32 [add p 4] value]
    p]]

[func alloc-char [value]
  [assert [is-between 32 value 126] 'invalid ascii character']
  [let [p [alloc 8]]
    [store32 p 15]
    [store32 [add p 4] value]
    p]]

[func align4 [x] [bit-and [add x 3] [bit-xor 3 -1]]]

[func alloc-string-from-bytes [pointer size]
  [assert [not [is-negative size]] 'alloc-string-from-bytes negative size']
  [let [s [alloc [align4 [add size 8]]]]
    [store32 s 17]
    [store32 [add s 4] size]
    [memory-copy [add s 8] pointer size]
    s]]

[func is-string [p] [eq [load32 p] 17]]

[func string-concat [o1 o2]
  [assert [is-string o1] 'string-concat o1 not a string']
  [assert [is-string o2] 'string-concat o2 not a string']
  [let
    [len1 [load32 [add o1 4]]
     len2 [load32 [add o2 4]]
     len [add len1 len2]
     s [alloc [align4 [add len 8]]]]
    [store32 s 17]
    [store32 [add s 4] len]
    [memory-copy [add s 8] [add o1 8] len1]
    [memory-copy [add s [add 8 len1]] [add o2 8] len2]
    s]
]

[func int32-to-hex-string [value]
  [assert [not [is-negative value]] 'int32-to-hex-string negative value']
  [assert [le value 0xff] 'int32-to-hex-string value too large']
  [let [string-size 4
        s [alloc [add string-size 8]]]
    [store32 s 17]
    [store32 [add s 4] string-size]
    [store8 [add s 8] 0x30] ; '0'
    [store8 [add s 9] 0x78] ; 'x'
    [store8 [add s 10] [add 0x30 [shift-right value 4]]]
    [store8 [add s 11] [add 0x30 [bit-and value 0xf]]]
    s]]

[func reverse-bytes [start end]
  [loop [i start j end]
    [if [lt i j]
      [let [tmp [load8u i]]
        [store8 i [load8u j]]
        [store8 j tmp]
        [cont [inc i] [dec j]]]
      []]]]

[print-object [alloc-i32 42]]

[print-object [alloc-string-from-bytes 0 0]]

[func print-ascii []
  [loop [i 32]
    [print-object [alloc-char i]]
    [if [lt i 126]
      [cont [inc i]]
      []]]]

; [print-object [string-concat [int32-to-hex-string 0x42] [int32-to-hex-string 0x43]]]

; dynamic lists are growable arrays of pointers
; the first 4 bytes is the tag 19
; the next 4 bytes is the size
; the next 4 bytes is the capacity
; the elements are pointed to by the next 4*size bytes

[func alloc-list [initial-capacity]
  [assert [ge initial-capacity 1] 'alloc-list initial-capacity too small']
  [let [p [alloc 16]]
    [store32 p 19]
    [store32 [add p 4] 0]
    [store32 [add p 8] initial-capacity]
    [store32 [add p 12] [alloc [mul 4 initial-capacity]]]
    p]]

[func list-push [list element]
  [assert [eq [load32 list] 19] 'list-push: list not a list']
  [let
    [size [load32 [add list 4]]
     capacity [load32 [add list 8]]
     elements [load32 [add list 12]]]
    [if [lt size capacity]
      [let []
        [store32 [add list 4] [inc size]]
        [store32 [add elements [mul 4 size]] element]]

      ; grow
      [let
        [new-capacity [mul capacity 2]
         new-elements [alloc [mul 4 new-capacity]]]
        [memory-copy new-elements elements [mul 4 size]]
        [store32 list 19]
        [store32 [add list 4] [inc size]]
        [store32 [add list 8] new-capacity]
        [store32 [add list 12] new-elements]
        [store32 [add new-elements [mul 4 size]] element]
   ;     [free elements]
        ]
      ]]]

[func list-pop [list]
  [assert [eq [load32 list] 19] 'list-pop: list not a list']
  [let
    [size [load32 [add list 4]]
     - [assert [gt size 0] 'list-pop empty list']
     capacity [load32 [add list 8]]
     elements [load32 [add list 12]]]
    [let
      [element [load32 [add elements [mul 4 size]]]]
      [store32 [add list 4] [dec size]]
      element]]]

[func list-get [list index]
  [assert [eq [load32 list] 19] 'list-get list not a list']
  [assert [not [is-negative index]] 'list-get negative index']
  [let
    [size [load32 [add list 4]]
     - [assert [lt index size] 'list-get index out of bounds']
     elements [load32 [add list 12]]]
    [load32 [add elements [mul 4 index]]]]]

[func list-size [list]
  [assert [eq [load32 list] 19] 'list-size list not a list']
  [load32 [add list 4]]]

[func list-tester []
  [let
    [l [alloc-list 8]]
    [list-push l [int32-to-hex-string 0x42]]
    [print-object [alloc-i32 [list-size l]]]
    [list-push l [int32-to-hex-string 0x43]]
    [print-object [alloc-i32 [list-size l]]]
    [list-push l [int32-to-hex-string 0x44]]
    [print-object [alloc-i32 [list-size l]]]
   
    [print-object [list-get l 1]]
    
    [list-pop l]
    [print-object [alloc-i32 [list-size l]]]
    [list-pop l]
    [print-object [alloc-i32 [list-size l]]]
    [list-pop l]
    [print-object [alloc-i32 [list-size l]]]

   ; [print-object [list-pop l]]
  ;  [print-object [list-pop l]]
  ;  [print-object [list-pop l]]
    ]
]

[list-tester]
