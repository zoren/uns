[func inc [x] [add x [quote 1]]]

[func dec [x] [sub x [quote 1]]]

[func not [c] [eq c [quote 0]]]

[func is-zero [x] [eq x [quote 0]]]

[func is-odd [x] [bit-and x [quote 1]]]

[func is-even [x] [not [is-odd x]]]

[func is-negative [x] [lt x [quote 0]]]

[func first [l] [at l [quote 0]]]
[func second [l] [at l [quote 1]]]
[func third [l] [at l [quote 2]]]
[func rest [l] [slice l [quote 1] [size l]]]
[func list [.. l] l]

[macro if-not [cond then else]
  [list [quote if] cond else then]]

[macro do [.. forms]
  [concat [quote [let []]] forms]]

[macro when [cond .. forms]
  [list
    [quote if] cond
    [concat [quote [do]] forms]
    []]]

[macro when-not [cond .. forms]
  [list
    [quote if] cond
    []
    [concat [quote [do]] forms]]]

[macro assert [cond .. lmsg]
  [list [quote when-not] cond
    [list [quote log] [list [quote quote] [concat [list [quote assert-fail]] lmsg]]]
    [quote [abort]]]]

[macro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [not [is-zero s]] ifs requires an odd number of arguments]
    [if [eq s [quote 1]]
        [first clauses]
        [list [quote if] [first clauses]
          [second clauses]
          [concat [quote [ifs]] [slice clauses [quote 2] [size clauses]]]]]]]

[macro and [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      [quote 1]

      [eq s [quote 1]]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            [concat [quote [and]] [rest clauses]]
            gs]]]]]]

[macro or [.. clauses]
  [let [s [size clauses]]
    [ifs
      [is-zero s]
      [quote 0]

      [eq s [quote 1]]
      [first clauses]

      [let [gs [gensym]]
        [list [quote let] [list gs [first clauses]]
          [list [quote if] gs
            gs
            [concat [quote [or]] [rest clauses]]]]]]]]

[func = [a b]
  [if
    [and [is-word a] [is-word b]]
    [eq a b]

    [and [is-list a] [is-list b]
      [let [s [size a]]
        [and [eq s [size b]]
          [loop [i [quote 0]]
            [or [ge i s]
              [and [= [at a i] [at b i]] [cont [inc i]]]]]]]]]]

[func is-whitespace [c]
  [or [eq c [quote 32]] [eq c [quote 10]]]]

[func is-square-bracket [c]
  [or [eq c [quote 91]] [eq c [quote 93]]]]

[func is-between-inclusive [lower c upper]
  [and [le lower c] [le c upper]]]

[func is-digit [c] [is-between-inclusive [quote 48] c [quote 57]]]

[func is-ident-char [c]
  [or
    [is-between-inclusive [quote 97] c [quote 122]]
    [is-digit c]
    [is-between-inclusive [quote 45] c [quote 46]]]]

[func get-token [code-points start end]
  [loop [i start]
    [if [ge i end]
      [list [quote eof] i i]

      [let [tok-start i
            c [at code-points i]]
        [ifs
          [is-whitespace c]
          [cont [inc i]]

          [is-square-bracket c]
          [list [word [list c]] i [inc i]]

          [is-ident-char c]
          [loop [j [inc i]]
            [if [and [lt j end] [is-ident-char [at code-points j]]]
              [cont [inc j]]
              [list [quote ident] tok-start j]]]

          [do
            [log [quote [unexpected character]]]
            [abort]]]]]]]

[func lex [code-points]
  [let [s [size code-points]
        tokens [mutable-list]]
    [loop [i [quote 0]]
      [if [ge i s]
        [freeze tokens]
        [let [tup [get-token code-points i s]
              c [first tup]
              end [third tup]]
            [if [eq c [quote eof]]
              [freeze tokens]
              [do
                [push tokens
                  [if [eq c [quote ident]]
                      [word [slice code-points [second tup] end]]
                      c]]
                [cont end]]]]]]]]

[func is-single-char [word c]
  [and [eq [size word] [quote 1]] [eq [first word] c]]]

[func parse1 [tokens i]
  [assert [lt i [size tokens]] unexpected end of input]
  [let [token [at tokens i]
        s-toks [size tokens]]
    [if-not [is-single-char token [quote 91]]
      [list token [inc i]]
      [let
        [ls [mutable-list]
          new-j
          [loop [j [inc i]]
            [ifs
              [ge j s-toks]
              j

              [is-single-char [at tokens j] [quote 93]]
              [inc j]

              [let [res [parse1 tokens j]]
                [push ls [first res]]
                [cont [second res]]]]]]
          [list [freeze ls] new-j]]]]]

[func parse-all [code-points]
  [let [tokens [lex code-points]
        n-toks [size tokens]
        forms [mutable-list]]
    [loop [i [quote 0]]
      [if [ge i n-toks]
        [freeze forms]
        [let [res1 [parse1 tokens i]]
          [push forms [first res1]]
          [cont [second res1]]]]]]]

[func parse-chars [code-points]
  [first [parse1 [lex code-points] [quote 0]]]]

[func print [f]
  [if [is-word f]
    f
    [let [s [size f]]
      [concat-words
        [word [quote [91]]]
        [if [is-zero s]
          [word []]
          [loop [i [quote 0]
                 res []]
            [if [lt i [dec s]]
              [cont [inc i] [concat res [print [at f i]] [word [quote [93]]]]]
              [concat-words res [print [at f [dec s]]]]]]]
        [word [quote [93]]]]]]]

[func lookup [ctx sym]
  [let [s [size ctx]]
    [loop [i [quote 0]]
      [if [ge i s]
        []
        [let [k [at ctx i]
              v [at ctx [inc i]]]
          [if [eq k sym]
            v
            [cont [add i [quote 2]]]]]]]]]

[macro comment [.. -] []]

[func analyse [ctx form]
  [log [list [quote analysing] form [is-word form]]]
  [if [is-word form]
    [lookup ctx form]
    [let [s [size form]]
      [if [eq s [quote 0]]
        []
        [let [first-word [first form]
              args [slice form [quote 1] s]
              n-of-args [size args]]
          [assert [is-word first-word] non symbol first in form]
          [ifs
            [eq first-word [quote quote]]
            [do
              [log [quote quoteeling]]
              [assert [eq n-of-args [quote 1]] quote requires one arg]
              [comment check if arg is a word and if it is decimal integer]
              []]

            [eq first-word [quote if]]
            [do
              [assert [eq n-of-args [quote 3]] if requires three args]
              [let [cond [analyse ctx [first args]]
                    then [analyse ctx [second args]]
                    else [analyse ctx [third args]]]
                []]
              ]

            [eq first-word [quote let]]
            [do
              [assert [ge n-of-args [quote 2]] let requires at least two args]
              [let [bindings [first args]
                    bodies [slice args [quote 1] n-of-args]]
                [assert [is-list bindings] let requires a list of bindings]
                [let [n-of-bindings [size bindings]]
                  [assert [is-even n-of-bindings] let requires an even number of bindings]]
              ]
              ]

            []

            ]]]]]]

[func append [l e]
  [concat l [list e]]]

[func is-all-digits [word]
  [let [s [size word]]
    [loop [i [quote 0]]
      [ifs
        [ge i s]
        [quote 1]

        [is-digit [at word i]]
        [cont [inc i]]

        [quote 0]]]]]

[func dec-word-to-hex-word [dw]
  [assert [not [is-negative dw]] expected non-negative decimal word]
  [if [is-zero dw]
    [quote [48]]
    [let [hex-digits [quote 0123456789abcdef]]
      [loop [n dw
             res []]
        [if [is-zero n]
          [word-from-codepoints res]
          [let [remainder [bit-and n [quote 15]]
                quotient [bit-shift-right-signed n [quote 4]]]
            [cont quotient [concat [list [at hex-digits remainder]] res]]]]]]]]

[func u32-word-to-leb-128 [w]
  [assert [not [is-negative w]] expected 32 bit ints]
  [loop [n w
         res []]
    [let
      [byte [bit-and n [quote 127]]
       nn [bit-shift-right-signed n [quote 7]]]
      [if [is-zero nn]
        [append res byte]
        [cont nn [append res [bit-or byte [quote 128]]]]]]]]

[func s32-word-to-leb-128 [value]
  [if [is-negative value]
    [loop [value1 value
          res []]
      [let
        [byte [bit-and value1 [quote 127]]
        value2 [bit-shift-right-signed value1 [quote 7]]]
        [if [or [and [is-zero value2]       [not [bit-and byte [quote 64]]]]
                [and [eq value2 [quote -1]] [bit-and byte [quote 64]]]]
          [append res byte]
          [cont value2 [append res [bit-or byte [quote 128]]]]]]]
    [loop [value1 value
      res []]
      [let
        [byte [bit-and value1 [quote 127]]
        value2 [bit-shift-right-signed value1 [quote 7]]]
        [if [or [and [is-zero value2]       [not [bit-and byte [quote 64]]]]
                [and [eq value2 [quote -1]] [bit-and byte [quote 64]]]]
          [append res byte]
          [cont value2 [append res [bit-or byte [quote 128]]]]]]]]]

[func wuns-to-wasm [w]
  [let [2-param-mapping
    [quote
      [
        add i32.add
        sub i32.sub
        bit-and i32.and
        bit-or i32.or
        bit-xor i32.xor
        bit-shift-left i32.shl
        bit-shift-right-signed i32.shr-s
        bit-shift-right-unsigned i32.shr-u

        eq i32.eq
        lt i32.lt-s
        le i32.le-s
        ge i32.ge-s
        gt i32.gt-s
      ]]]
    [lookup 2-param-mapping w]]]

[func comp-to-wasm [ctx form]
  [if [is-word form]
    [if [is-all-digits form]
      [list [quote i32.const] form]
      [list [quote local.get] [lookup ctx form]]]
    [let [first-word [first form]]
      [assert [is-word first-word] non symbol first in form]
      [ifs
        [eq first-word [quote quote]]
        [do
          [assert [eq [size form] [quote 2]] quote requires one arg]
          [assert [is-all-digits [second form]] quote requires a decimal integer]
          [list [quote i32.const] [second form]]]

        [do
          [assert [eq [size form] [quote 3]] requires two args]
          [list [wuns-to-wasm first-word]
            [comp-to-wasm ctx [second form]]
            [comp-to-wasm ctx [third form]]]]


    ]]]]

[quote
  [
    [func inc [x] [add x [quote 1]]]
    [func dec [x] [sub x [quote 1]]]
  ]
  ]

[log [comp-to-wasm [quote [x 0]] [quote [sub x [quote 3]]]]]

[func map-to-hex [l]
  [loop [res []
         i [quote 0]]
    [if [lt i [size l]]
      [cont [append res [dec-word-to-hex-word [at l i]]] [inc i]]
      res]]]


[comment this is wrong
  [map-to-hex [u32-word-to-leb-128 [quote 624485]]]]


[comment
  [loop [i [quote 0]]
    [when [lt i [quote 32]]
      [log [list i [dec-word-to-hex-word i]]]
      [cont [inc i]]]]
]

[macro lg [.. lmsg]
  [list [quote log] [list [quote quote] [concat lmsg]]]]

[log [quote [23 34]]]
[lg hej du 4 5]
