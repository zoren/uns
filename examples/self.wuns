[macro comment [.. -] []]

[func inc [x] [add x [quote 1]]]

[func dec [x] [sub x [quote 1]]]

[func eqz [x] [eq x [quote 0]]]

[func not [c] [eqz c]]

[func is-odd [x] [bit-and x [quote 1]]]

[func is-even [x] [not [is-odd x]]]

[func is-negative [x] [lt x [quote 0]]]

[func first [l] [nth l [quote 0]]]
[func second [l] [nth l [quote 1]]]
[func third [l] [nth l [quote 2]]]

[macro and [.. clauses]
  [let [s [size clauses]]
    [if [eq s [quote 0]]
      [quote 1]
      [loop [i [dec s]
             result [first clauses]]
          [if [is-negative i]
            result
            [cont
              [dec i]
              [list [quote if] [nth clauses i] result [list [quote quote] [quote 0]]]]]]]]]

[macro or [.. clauses]
  [let [s [size clauses]]
    [if [eq s [quote 0]]
      [quote 0]
      [loop [i [dec s]
             result [first clauses]]
          [if [is-negative i]
            result
            [cont
              [dec i]
              [list [quote if] [nth clauses i] [list [quote quote] [quote 1]] result]]]]]]]

[func is-whitespace [c]
  [or [eq c [quote 32]] [eq c [quote 10]]]]

[func is-square-bracket [c]
  [or [eq c [quote 91]] [eq c [quote 93]]]]

[func is-between-inclusive [lower c upper]
  [and [le lower c] [le c upper]]]

[func is-digit [c] [is-between-inclusive [quote 48] c [quote 57]]]

[func is-ident-char [c]
  [or
    [is-between-inclusive [quote 97] c [quote 122]]
    [is-digit c]
    [is-between-inclusive [quote 45] c [quote 46]]]]

[macro if-not [cond then else]
  [list [quote if] cond else then]]

[func quote-all [l]
  [let [s [size l]
        qq [quote quote]]
    [loop [i [quote 0]
           res [list]]
      [if [lt i s]
        [cont [inc i] [concat res [list qq [nth l i]]]]
        res]]]]

[macro assert [cond .. lmsg]
  [concat
    [list [quote when-not] cond]
    []
    [list [quote abort] [list [quote quote] [list [quote ass-fail] lmsg]]]]]

[macro ifs [.. clauses]
  [let [s [size clauses]]
    [assert [is-odd s] ifs requires an odd number of forms]
    [loop [res [nth clauses [dec s]]
           i [dec s]]
      [if i
        [cont
          [list [quote if]
            [nth clauses [sub i [quote 2]]]
            [nth clauses [dec i]]
            res]
          [sub i [quote 2]]]
        res]]]]

[func get-token [code-points start end]
  [loop [i start]
    [if [ge i end]
      [list [quote eof] i i]

      [let [tok-start i
            c [nth code-points i]]
        [ifs
          [is-whitespace c]
          [cont [inc i]]

          [is-square-bracket c]
          [list [word [list c]] i [inc i]]

          [is-ident-char c]
          [loop [j [inc i]]
            [if [if [lt j end] [is-ident-char [nth code-points j]] [quote 0]]
              [cont [inc j]]
              [list [quote ident] tok-start j]]]

          [abort unexpected-character]]]]]]

[func sum-num-words [codes]
  [let [s [size codes]]
    [loop [i [quote 0]
          sum [quote 0]]
      [if [lt i s]
        [cont [inc i] [add sum [nth codes i]]]
        sum]]]]

[macro do [.. forms]
  [concat [list [quote let] []] forms]]

[macro when [cond .. forms]
  [list
    [quote if] cond
    [concat [list [quote do]] forms]
    []]]

[macro when-not [cond .. forms]
  [list
    [quote if] cond
    []
    [concat [list [quote do]] forms]]]

[func lex [code-points]
  [let [s [size code-points]]
    [loop [i [quote 0]
           tokens [quote []]]
      [if [ge i s]
        tokens
        [let [tup [get-token code-points i s]
              c [first tup]
              end [third tup]]
            [if [eq c [quote eof]]
              tokens
              [cont end [concat tokens
                [list [if [eq c [quote ident]]
                        [word [slice code-points [second tup] end]]
                        c]]]]]]]]]]

[func parse1 [tokens i]
  [when [ge i [size tokens]]
    [abort [quote unexpected-end-of-input]]]
  [let [token [nth tokens i]
        start-bracket [word [quote [91]]]
        end-bracket [word [quote [93]]]]
    [if-not [eq token start-bracket]
      [list token [inc i]]
      [loop [ls []
             j [inc i]]
        [ifs
          [ge j [size tokens]]
          [list ls j]

          [eq [nth tokens j] end-bracket]
          [list ls [inc j]]

          [let [res [parse1 tokens j]
                f [first res]
                k [second res]]
            [cont [concat ls [list f]] k]]]]]]]

[func parse-all [code-points]
  [let [tokens [lex code-points]
        n-toks [size tokens]]
    [loop [i [quote 0]
           forms []]
      [if [ge i n-toks]
        forms
        [let [res1 [parse1 tokens i]
              f [first res1]
              k [second res1]]
          [cont k [concat forms [list f]]]]]]]]

[func parse-chars [code-points]
  [first [parse1 [lex code-points] [quote 0]]]]

[func print [f]
  [if [is-word f]
    f
    [let [s [size f]]
      [concat-words
        [word [quote [91]]
        [if [eq s [quote 0]]
          [word []]
          [loop [i [quote 0]
                 res []]
            [if [lt i [dec s]]
              [cont [inc i] [concat res [print [nth f i]] [wfcc 32]]]
              [concat-words res [print [nth f [dec s]]]]]]]
        [word [quote [93]]]]]]]]

[func lookup [ctx sym]
  [let [s [size ctx]]
    [loop [i [quote 0]]
      [if [ge i s]
        [quote symbol-not-found]
        [let [k [nth ctx i]
              v [nth ctx [inc i]]]
          [if [eq k sym]
            [tup v]
            [cont [add i [quote 2]]]]]]]]]

[func analyse [ctx form]
  [log [list [quote analysing] form [is-word form]]]
  [if [is-word form]
    [lookup ctx form]
    [let [s [size form]]
      [if [eq s [quote 0]]
        []
        [let [first-word [first form]
              args [slice form [quote 1] s]
              n-of-args [size args]]
          [when-not [is-word first-word]
            [abort [quote non-symbol-in-form]]]
          [ifs
            [eq first-word [quote quote]]
            [do
              [log [quote quoteeling]]
              [when-not [eq n-of-args [quote 1]]
                [abort [quote quote-requires-one-arg]]]
              []]

            [eq first-word [quote if]]
            [do
              [when-not [eq n-of-args [quote 3]]
                [abort [quote if-requires-three-args]]]
              [let [cond [analyse ctx [first args]]
                    then [analyse ctx [second args]]
                    else [analyse ctx [third args]]]
                []]
              ]

            [eq first-word [quote let]]
            [do
              [when [lt n-of-args [quote 2]]
                [abort [quote let-requires-at-least-two-args]]]
              [let [bindings [first args]
                    bodies [slice args [quote 1] n-of-args]]
                [when-not [is-list bindings]
                  [abort [quote let-requires-a-list-of-bindings]]]
                [let [n-of-bindings [size bindings]]
                  [when-not [is-even n-of-bindings]
                    [abort [quote let-requires-an-even-number-of-bindings]]]]
                

              ]
              ]

            []
            
            ]]]]]]

[comment
  [analyse [] [quote [let b c d ]]]
  
  ]


[comment
  [analyse [] [quote no-such]]

  [analyse [] [quote [[]]]]
  
  ]
