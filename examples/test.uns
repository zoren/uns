0 ; => 0
1 ; => 1
10 ; => 10
-1 ; => -1
00 ; => 0
0x00 ; => 0
0x10 ; => 16
0x1f ; => 31

[if 0 1 2] ; => 2
[if 1 1 2] ; => 1

[add 1 2] ; but a comment
 ; => 3
[add 1 ; line comment 2
     2] ; end comment
; => 3
[add 1 [sub 3 2]] ; => 2

;'unz unz' ; => 'unz unz'

[func inc [x] [add x 1]] ; => []
[inc 1] ; => 2

[func dec [x] [sub x 1]] ; => []

[func inc-inc [x] [inc [inc x]]] ; => []
[inc-inc 1] ; => 3

[let [x 2 y 3] [add x y]] ; => 5
[let [x 2 y x] [add x y]] ; => 4
[let [x 2] [let [y 3] [add x y]]] ; => 5
[let [x 2] [let [y x] [add x y]]] ; => 4

[loop [r [quote 0] i [quote 10]] [if i [cont [add r i] [sub i 1]] r]] ; => 55

[quote f] ; => f
[quote 0] ; => 0
[quote ''] ; => ''
[quote []] ; => []
[quote [1 2 3]] ; => [1 2 3]

[macro add2 [x y] [add x y]] ; => []
[add2 1 2] ; => 3
[macro if2 [] [quote [if 4 3 2]]] ; => []
[if2] ; => 3

[quasiquote f] ; => f
[quasiquote 0] ; => 0
[quasiquote ''] ; => ''
[quasiquote []] ; => []
[quasiquote [1 2 3]] ; => [1 2 3]
[quasiquote [if [unquote 1]]] ; => [if 1]
[let [i 1] [quasiquote [if [unquote i] 2 3]]] ; => [if 1 2 3]

[macro unless [cond then else]
  [quasiquote [if [unquote cond] [unquote else] [unquote then]]]] ; => []
[unless 0 7 8] ; => 7

[let [i 0] [if 1 2 i]] ; => 2

[let [i 0] [unless 1 i 2]]
[macro unless-unless [cond then else]
  [unless cond then else]] ; => []
[unless-unless 0 7 8] ; => 7

[func hva [.. rest] rest] ;

[hva 2 3 4] ; => [2 3 4]

[macro when [cond .. forms]
  [quasiquote
    [if [unquote cond]
       [let []
         [splice-unquote forms]]
       []]]]

;[when 1 [print 'in when']]

[macro mf [x] []]
[func caller [] [mf [add x 1]]]
[func mf [x] x]
[func caller [] [mf [add x 1]]]
; here we should get an error, because x is not defined in the caller
[caller] 
;; this is a fundamental problem in LISP, it is the caller's responsibility to evaluate its arguments or not depending on dynamic context